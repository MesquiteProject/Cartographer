/* Mesquite.cartographer source code.  Copyright 2008-2009 D. Maddison and W. Maddison. Version 1.3, June 2008.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.cartographer.lib;/*~~  */import mesquite.lib.*;public abstract class CalibratedStand0Proj extends CalibratedStandProj {		public MesquiteNumber standardLongitude = new MesquiteNumber();   // lambda-0	protected double lambda0 = 0.0;		/*.................................................................................................................*/  	public boolean parametersSpecified(){  		return true;  	}	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, boolean hiredByName) {  		return super.startJob(arguments, condition, hiredByName);    	 }  	 		/*.................................................................................................................*/   	public void processProjectionParameters(boolean duringOptimization){		super.processProjectionParameters(duringOptimization);  	}	/*.................................................................................................................*/	public boolean readProjectionParameters(String contents){		return true;	}	/*.................................................................................................................*/	public boolean queryStandards() {   		return true;	}	/*.................................................................................................................*/   	public String getParameters() { 		return "";   	}	/*.................................................................................................................*/    	 public void setParametersToCalibrationPoint(int j){		if (calibrations[j]!=null) {			standardLongitude.setValue(calibrations[j].getLongitude().getDoubleValue()); 		}    	 }	/*.................................................................................................................*/    	 public void setParametersToTwoCalibrationPoints(int i, int j){		if (calibrations[j]!=null) {			standardLongitude.setValue(calibrations[j].getLongitude().getDoubleValue()); 		}    	 }	/*.................................................................................................................*/    	 public int getNumParameters (){    	 	return 0;    	 }    		/*.................................................................................................................*/    		public double evaluate(double[] x, Object param){    			return 0.0;    		}	/*.................................................................................................................*/		double  standardLongitudeStored; 	/*.................................................................................................................*/    	 public void storeParameters() {		standardLongitudeStored =standardLongitude.getDoubleValue();      	 }	/*.................................................................................................................*/    	 public void recoverStoredParameters() {		standardLongitude.setValue(standardLongitudeStored);      	 }	/*.................................................................................................................*/    	 public void setParametersIfUnassigned(boolean setEvenIfAssigned) {		if (!standardLongitude.isCombinable() || setEvenIfAssigned)			standardLongitude.setValue(RandomBetween.getDoubleStatic(-180.0,180.0));     	 }	/*.................................................................................................................*/    	 public double[] getParamArray() {    	 	double[] x = new double[1];    	 	x[0] = standardLongitude.getDoubleValue();    	 	return x;    	 }   	 }