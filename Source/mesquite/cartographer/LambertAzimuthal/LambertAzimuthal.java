/* Mesquite.cartographer source code.  Copyright 2008-2009 D. Maddison and W. Maddison. Version 1.3, June 2008.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.cartographer.LambertAzimuthal;/*~~  */import mesquite.lib.*;import mesquite.cartographer.lib.*;import mesquite.cont.lib.*;public class LambertAzimuthal extends CalibratedStand2Proj {	/* Equations used come from 			Eric W. Weisstein. "Lambert Azimuthal Equal-Area Projection." From MathWorld--A Wolfram Web Resource.  			http://mathworld.wolfram.com/LambertAzimuthalEqual-AreaProjection.html 		as well as 			Snyder, J.ÊP.  1987.  Map Projections--A Working Manual. U.ÊS. Geological Survey Professional Paper 1395. 			Washington,  DC: U.ÊS. Government Printing Office.	lambda is longitude;  phi is latitude 		*/			/*.................................................................................................................*/   	public boolean convertFromProjectionCoordinates(double x, double y, MesquiteNumber longitude, MesquiteNumber latitude){   		double lambda;   		double phi;   		double ro = Math.sqrt(x*x +y*y);   		double c = 2* Math.asin(ro/2.0);   		phi = Math.asin(Math.cos(c)*Math.sin(phi1) + ((y*Math.sin(c)*Math.cos(phi1))/ro));   		lambda = lambda0 + Math.atan((x*Math.sin(c))/(ro*Math.cos(phi1)*Math.cos(c) - y*Math.sin(phi1)*Math.sin(c)));   		   		   		longitude.setValue(GeographicData.getRegularLongitude(lambda));   		latitude.setValue(GeographicData.getRegularLatitude(phi));   		return true;   	}	/*.................................................................................................................*/   	public boolean convertToUnscaledProjectionCoordinates(double longitude, double latitude, MesquiteNumber x, MesquiteNumber y){   		if (MesquiteDouble.isCombinable(longitude) && MesquiteDouble.isCombinable(latitude)) {   			double phi = GeographicData.getPolarLatitude(latitude);   			double lambda = GeographicData.getPolarLongitude(longitude);   			double kprime = Math.sqrt(2/(1.0 + Math.sin(phi1)*Math.sin(phi) + Math.cos(phi1)*Math.cos(phi)*Math.cos(lambda - lambda0)));   			x.setValue(kprime*Math.cos(phi)*Math.sin(lambda-lambda0));   			y.setValue(kprime*(Math.cos(phi1)*Math.sin(phi) - Math.sin(phi1)*Math.cos(phi)*Math.cos(lambda-lambda0)));   			return true;   		}   		else   			return false;   	}	/*.................................................................................................................*/  	/** returns the version number at which this module was first released.  If 0, then no version number is claimed.  If a POSITIVE integer  	 * then the number refers to the Mesquite version.  This should be used only by modules part of the core release of Mesquite.  	 * If a NEGATIVE integer, then the number refers to the local version of the package, e.g. a third party package*/     	public int getVersionOfFirstRelease(){     		return -100;     }	/*.................................................................................................................*/    	 public String getName() {		return "Lambert Azimuthal Equal-Area Projection";   	 }	/*.................................................................................................................*/  	 public String getExplanation() {		return "Converts to and from a Lambert Azimuthal Equal-Area map projection.";   	 }   	public boolean isPrerelease(){   		return false;   	}	/*.................................................................................................................*/   	 public boolean showCitation(){   	 	return false;   	 }   	 }